#include <iostream>
#include <cstdlib>
#include <cstdint>
#include <fstream>
#include <sstream>
#include <string>

using namespace std;

typedef unsigned long long ull;

//For testing only, outputs the binary representation of the 64 bit unsigned input as a string
string getBits(ull input)
{
	string str(64, '0');

	for (int i = 0; i < 64; i++)
	{
		if ((1ll << i) & input)
			str[63 - i] = '1';
	}
	return str;
}

//converts key argument into an ull
//checks if key is in hex or string format and converts accordingly.
ull convertKey(char keyIn[])
{
	int startPoint = 0;
	ull ullkey = 0;
	ull x = 0;
	if (keyIn[0] == '\'' || keyIn[0] == '\"') //string input
	{
		while (keyIn[startPoint] == '\'' || keyIn[startPoint] == '\"') startPoint++;
		char key[8];
		for (int i = 0; i < 8; i++)
		{
			key[i] = keyIn[startPoint + i];
			x = (ull)keyIn[startPoint + i];
			ullkey = ullkey << 8;
			ullkey |= x;
			
		}

	}
	else // hex input
	{
		char * pEnd;
		ullkey = strtoull(keyIn, &pEnd, 16);
	}	
	return ullkey;
}

//compress 64 bit key to 56 bits
ull compressKey1(ull x)
{
	ull y = 0;
	ull i = 1;

	if (x & (i << 63)) y |= (i << 56); //Bit 1 -> 8
	if (x & (i << 62)) y |= (i << 48); //Bit 2 -> 16
	if (x & (i << 61)) y |= (i << 40); //Bit 3 -> 24
	if (x & (i << 60)) y |= (i << 8); //Bit 4 -> 56
	if (x & (i << 59)) y |= (i << 12); //Bit 5 -> 52
	if (x & (i << 58)) y |= (i << 20); //Bit 6 -> 44
	if (x & (i << 57)) y |= (i << 28); //Bit 7 -> 36
	if (x & (i << 55)) y |= (i << 57); //Bit 9 -> 7
	if (x & (i << 54)) y |= (i << 49); //Bit 10 -> 15
	if (x & (i << 53)) y |= (i << 41); //Bit 11 -> 23
	if (x & (i << 52)) y |= (i << 9); //Bit 12 -> 55
	if (x & (i << 51)) y |= (i << 13); //Bit 13 -> 51
	if (x & (i << 50)) y |= (i << 21); //Bit 14 -> 43
	if (x & (i << 49)) y |= (i << 29); //Bit 15 -> 35
	if (x & (i << 47)) y |= (i << 58); //Bit 17 -> 6
	if (x & (i << 46)) y |= (i << 50); //Bit 18 -> 14
	if (x & (i << 45)) y |= (i << 42); //Bit 19 -> 22
	if (x & (i << 44)) y |= (i << 10); //Bit 20 -> 54
	if (x & (i << 43)) y |= (i << 14); //Bit 21 -> 50
	if (x & (i << 42)) y |= (i << 22); //Bit 22 -> 42
	if (x & (i << 41)) y |= (i << 30); //Bit 23 -> 34
	if (x & (i << 39)) y |= (i << 59); //Bit 25 -> 5
	if (x & (i << 38)) y |= (i << 51); //Bit 26 -> 13
	if (x & (i << 37)) y |= (i << 43); //Bit 27 -> 21
	if (x & (i << 36)) y |= (i << 11); //Bit 28 -> 53
	if (x & (i << 35)) y |= (i << 15); //Bit 29 -> 49
	if (x & (i << 34)) y |= (i << 23); //Bit 30 -> 41
	if (x & (i << 33)) y |= (i << 31); //Bit 31 -> 33
	if (x & (i << 31)) y |= (i << 60); //Bit 33 -> 4
	if (x & (i << 30)) y |= (i << 52); //Bit 34 -> 12
	if (x & (i << 29)) y |= (i << 44); //Bit 35 -> 20
	if (x & (i << 28)) y |= (i << 36); //Bit 36 -> 28
	if (x & (i << 27)) y |= (i << 16); //Bit 37 -> 48
	if (x & (i << 26)) y |= (i << 24); //Bit 38 -> 40
	if (x & (i << 25)) y |= (i << 32); //Bit 39 -> 32
	if (x & (i << 23)) y |= (i << 61); //Bit 41 -> 3
	if (x & (i << 22)) y |= (i << 53); //Bit 42 -> 11
	if (x & (i << 21)) y |= (i << 45); //Bit 43 -> 19
	if (x & (i << 20)) y |= (i << 37); //Bit 44 -> 27
	if (x & (i << 19)) y |= (i << 17); //Bit 45 -> 47
	if (x & (i << 18)) y |= (i << 25); //Bit 46 -> 39
	if (x & (i << 17)) y |= (i << 33); //Bit 47 -> 31
	if (x & (i << 15)) y |= (i << 62); //Bit 49 -> 2
	if (x & (i << 14)) y |= (i << 54); //Bit 50 -> 10
	if (x & (i << 13)) y |= (i << 46); //Bit 51 -> 18
	if (x & (i << 12)) y |= (i << 38); //Bit 52 -> 26
	if (x & (i << 11)) y |= (i << 18); //Bit 53 -> 46
	if (x & (i << 10)) y |= (i << 26); //Bit 54 -> 38
	if (x & (i << 9)) y |= (i << 34); //Bit 55 -> 30
	if (x & (i << 7)) y |= (i << 63); //Bit 57 -> 1
	if (x & (i << 6)) y |= (i << 55); //Bit 58 -> 9
	if (x & (i << 5)) y |= (i << 47); //Bit 59 -> 17
	if (x & (i << 4)) y |= (i << 39); //Bit 60 -> 25
	if (x & (i << 3)) y |= (i << 19); //Bit 61 -> 45
	if (x & (i << 2)) y |= (i << 27); //Bit 62 -> 37
	if (x & (i << 1)) y |= (i << 35); //Bit 63 -> 29

	y = y >> 8;

	return y;
}

//rotate left and right sides of 56 bit key
ull splitRotateKey(ull x, int round)
{
	round++;
	ull l1 = x >> 28;
	ull r1 = x << 36;
	r1 = r1 >> 36;
	ull l2 = 0, r2 = 0, i = 1, finalKey = 0;

	if (round == 1 || round == 2 || round == 9 || round == 16)
	{

		//l1 left circular shift 1 into l2
		if (l1 & (i << 27)) l2 |= (i << 0); //Bit 37 -> 64
		if (l1 & (i << 26)) l2 |= (i << 27); //Bit 38 -> 37
		if (l1 & (i << 25)) l2 |= (i << 26); //Bit 39 -> 38
		if (l1 & (i << 24)) l2 |= (i << 25); //Bit 40 -> 39
		if (l1 & (i << 23)) l2 |= (i << 24); //Bit 41 -> 40
		if (l1 & (i << 22)) l2 |= (i << 23); //Bit 42 -> 41
		if (l1 & (i << 21)) l2 |= (i << 22); //Bit 43 -> 42
		if (l1 & (i << 20)) l2 |= (i << 21); //Bit 44 -> 43
		if (l1 & (i << 19)) l2 |= (i << 20); //Bit 45 -> 44
		if (l1 & (i << 18)) l2 |= (i << 19); //Bit 46 -> 45
		if (l1 & (i << 17)) l2 |= (i << 18); //Bit 47 -> 46
		if (l1 & (i << 16)) l2 |= (i << 17); //Bit 48 -> 47
		if (l1 & (i << 15)) l2 |= (i << 16); //Bit 49 -> 48
		if (l1 & (i << 14)) l2 |= (i << 15); //Bit 50 -> 49
		if (l1 & (i << 13)) l2 |= (i << 14); //Bit 51 -> 50
		if (l1 & (i << 12)) l2 |= (i << 13); //Bit 52 -> 51
		if (l1 & (i << 11)) l2 |= (i << 12); //Bit 53 -> 52
		if (l1 & (i << 10)) l2 |= (i << 11); //Bit 54 -> 53
		if (l1 & (i << 9)) l2 |= (i << 10); //Bit 55 -> 54
		if (l1 & (i << 8)) l2 |= (i << 9); //Bit 56 -> 55
		if (l1 & (i << 7)) l2 |= (i << 8); //Bit 57 -> 56
		if (l1 & (i << 6)) l2 |= (i << 7); //Bit 58 -> 57
		if (l1 & (i << 5)) l2 |= (i << 6); //Bit 59 -> 58
		if (l1 & (i << 4)) l2 |= (i << 5); //Bit 60 -> 59
		if (l1 & (i << 3)) l2 |= (i << 4); //Bit 61 -> 60
		if (l1 & (i << 2)) l2 |= (i << 3); //Bit 62 -> 61
		if (l1 & (i << 1)) l2 |= (i << 2); //Bit 63 -> 62
		if (l1 & (i << 0)) l2 |= (i << 1); //Bit 64 -> 63


		//r1 left circular shift 1 into r2
		if (r1 & (i << 27)) r2 |= (i << 0); //Bit 37 -> 64
		if (r1 & (i << 26)) r2 |= (i << 27); //Bit 38 -> 37
		if (r1 & (i << 25)) r2 |= (i << 26); //Bit 39 -> 38
		if (r1 & (i << 24)) r2 |= (i << 25); //Bit 40 -> 39
		if (r1 & (i << 23)) r2 |= (i << 24); //Bit 41 -> 40
		if (r1 & (i << 22)) r2 |= (i << 23); //Bit 42 -> 41
		if (r1 & (i << 21)) r2 |= (i << 22); //Bit 43 -> 42
		if (r1 & (i << 20)) r2 |= (i << 21); //Bit 44 -> 43
		if (r1 & (i << 19)) r2 |= (i << 20); //Bit 45 -> 44
		if (r1 & (i << 18)) r2 |= (i << 19); //Bit 46 -> 45
		if (r1 & (i << 17)) r2 |= (i << 18); //Bit 47 -> 46
		if (r1 & (i << 16)) r2 |= (i << 17); //Bit 48 -> 47
		if (r1 & (i << 15)) r2 |= (i << 16); //Bit 49 -> 48
		if (r1 & (i << 14)) r2 |= (i << 15); //Bit 50 -> 49
		if (r1 & (i << 13)) r2 |= (i << 14); //Bit 51 -> 50
		if (r1 & (i << 12)) r2 |= (i << 13); //Bit 52 -> 51
		if (r1 & (i << 11)) r2 |= (i << 12); //Bit 53 -> 52
		if (r1 & (i << 10)) r2 |= (i << 11); //Bit 54 -> 53
		if (r1 & (i << 9)) r2 |= (i << 10); //Bit 55 -> 54
		if (r1 & (i << 8)) r2 |= (i << 9); //Bit 56 -> 55
		if (r1 & (i << 7)) r2 |= (i << 8); //Bit 57 -> 56
		if (r1 & (i << 6)) r2 |= (i << 7); //Bit 58 -> 57
		if (r1 & (i << 5)) r2 |= (i << 6); //Bit 59 -> 58
		if (r1 & (i << 4)) r2 |= (i << 5); //Bit 60 -> 59
		if (r1 & (i << 3)) r2 |= (i << 4); //Bit 61 -> 60
		if (r1 & (i << 2)) r2 |= (i << 3); //Bit 62 -> 61
		if (r1 & (i << 1)) r2 |= (i << 2); //Bit 63 -> 62
		if (r1 & (i << 0)) r2 |= (i << 1); //Bit 64 -> 63


	}	
	else
	{

		// l1 left circular shift 2 into l2
		if (l1 & (i << 27)) l2 |= (i << 1); //Bit 37 -> 63
		if (l1 & (i << 26)) l2 |= (i << 0); //Bit 38 -> 64
		if (l1 & (i << 25)) l2 |= (i << 27); //Bit 39 -> 37
		if (l1 & (i << 24)) l2 |= (i << 26); //Bit 40 -> 38
		if (l1 & (i << 23)) l2 |= (i << 25); //Bit 41 -> 39
		if (l1 & (i << 22)) l2 |= (i << 24); //Bit 42 -> 40
		if (l1 & (i << 21)) l2 |= (i << 23); //Bit 43 -> 41
		if (l1 & (i << 20)) l2 |= (i << 22); //Bit 44 -> 42
		if (l1 & (i << 19)) l2 |= (i << 21); //Bit 45 -> 43
		if (l1 & (i << 18)) l2 |= (i << 20); //Bit 46 -> 44
		if (l1 & (i << 17)) l2 |= (i << 19); //Bit 47 -> 45
		if (l1 & (i << 16)) l2 |= (i << 18); //Bit 48 -> 46
		if (l1 & (i << 15)) l2 |= (i << 17); //Bit 49 -> 47
		if (l1 & (i << 14)) l2 |= (i << 16); //Bit 50 -> 48
		if (l1 & (i << 13)) l2 |= (i << 15); //Bit 51 -> 49
		if (l1 & (i << 12)) l2 |= (i << 14); //Bit 52 -> 50
		if (l1 & (i << 11)) l2 |= (i << 13); //Bit 53 -> 51
		if (l1 & (i << 10)) l2 |= (i << 12); //Bit 54 -> 52
		if (l1 & (i << 9)) l2 |= (i << 11); //Bit 55 -> 53
		if (l1 & (i << 8)) l2 |= (i << 10); //Bit 56 -> 54
		if (l1 & (i << 7)) l2 |= (i << 9); //Bit 57 -> 55
		if (l1 & (i << 6)) l2 |= (i << 8); //Bit 58 -> 56
		if (l1 & (i << 5)) l2 |= (i << 7); //Bit 59 -> 57
		if (l1 & (i << 4)) l2 |= (i << 6); //Bit 60 -> 58
		if (l1 & (i << 3)) l2 |= (i << 5); //Bit 61 -> 59
		if (l1 & (i << 2)) l2 |= (i << 4); //Bit 62 -> 60
		if (l1 & (i << 1)) l2 |= (i << 3); //Bit 63 -> 61
		if (l1 & (i << 0)) l2 |= (i << 2); //Bit 64 -> 62



		//r1 left circular shift 2 into r2
		if (r1 & (i << 27)) r2 |= (i << 1); //Bit 37 -> 63
		if (r1 & (i << 26)) r2 |= (i << 0); //Bit 38 -> 64
		if (r1 & (i << 25)) r2 |= (i << 27); //Bit 39 -> 37
		if (r1 & (i << 24)) r2 |= (i << 26); //Bit 40 -> 38
		if (r1 & (i << 23)) r2 |= (i << 25); //Bit 41 -> 39
		if (r1 & (i << 22)) r2 |= (i << 24); //Bit 42 -> 40
		if (r1 & (i << 21)) r2 |= (i << 23); //Bit 43 -> 41
		if (r1 & (i << 20)) r2 |= (i << 22); //Bit 44 -> 42
		if (r1 & (i << 19)) r2 |= (i << 21); //Bit 45 -> 43
		if (r1 & (i << 18)) r2 |= (i << 20); //Bit 46 -> 44
		if (r1 & (i << 17)) r2 |= (i << 19); //Bit 47 -> 45
		if (r1 & (i << 16)) r2 |= (i << 18); //Bit 48 -> 46
		if (r1 & (i << 15)) r2 |= (i << 17); //Bit 49 -> 47
		if (r1 & (i << 14)) r2 |= (i << 16); //Bit 50 -> 48
		if (r1 & (i << 13)) r2 |= (i << 15); //Bit 51 -> 49
		if (r1 & (i << 12)) r2 |= (i << 14); //Bit 52 -> 50
		if (r1 & (i << 11)) r2 |= (i << 13); //Bit 53 -> 51
		if (r1 & (i << 10)) r2 |= (i << 12); //Bit 54 -> 52
		if (r1 & (i << 9)) r2 |= (i << 11); //Bit 55 -> 53
		if (r1 & (i << 8)) r2 |= (i << 10); //Bit 56 -> 54
		if (r1 & (i << 7)) r2 |= (i << 9); //Bit 57 -> 55
		if (r1 & (i << 6)) r2 |= (i << 8); //Bit 58 -> 56
		if (r1 & (i << 5)) r2 |= (i << 7); //Bit 59 -> 57
		if (r1 & (i << 4)) r2 |= (i << 6); //Bit 60 -> 58
		if (r1 & (i << 3)) r2 |= (i << 5); //Bit 61 -> 59
		if (r1 & (i << 2)) r2 |= (i << 4); //Bit 62 -> 60
		if (r1 & (i << 1)) r2 |= (i << 3); //Bit 63 -> 61
		if (r1 & (i << 0)) r2 |= (i << 2); //Bit 64 -> 62
	}

	finalKey = finalKey ^ l2 << 28;
	finalKey = finalKey ^ r2;

	return finalKey;


}

//compress 58 bit key to 48 bits
ull compressKey2(ull x)
{
	x = x << 8;
	ull y = 0;
	ull i = 1;

	if (x & (i << 63)) y |= (i << 59); //Bit 1 -> 5
	if (x & (i << 62)) y |= (i << 40); //Bit 2 -> 24
	if (x & (i << 61)) y |= (i << 57); //Bit 3 -> 7
	if (x & (i << 60)) y |= (i << 48); //Bit 4 -> 16
	if (x & (i << 59)) y |= (i << 58); //Bit 5 -> 6
	if (x & (i << 58)) y |= (i << 54); //Bit 6 -> 10
	if (x & (i << 57)) y |= (i << 44); //Bit 7 -> 20
	if (x & (i << 56)) y |= (i << 46); //Bit 8 -> 18
	if (x & (i << 54)) y |= (i << 52); //Bit 10 -> 12
	if (x & (i << 53)) y |= (i << 61); //Bit 11 -> 3
	if (x & (i << 52)) y |= (i << 49); //Bit 12 -> 15
	if (x & (i << 51)) y |= (i << 41); //Bit 13 -> 23
	if (x & (i << 50)) y |= (i << 63); //Bit 14 -> 1
	if (x & (i << 49)) y |= (i << 55); //Bit 15 -> 9
	if (x & (i << 48)) y |= (i << 45); //Bit 16 -> 19
	if (x & (i << 47)) y |= (i << 62); //Bit 17 -> 2
	if (x & (i << 45)) y |= (i << 50); //Bit 19 -> 14
	if (x & (i << 44)) y |= (i << 42); //Bit 20 -> 22
	if (x & (i << 43)) y |= (i << 53); //Bit 21 -> 11
	if (x & (i << 41)) y |= (i << 51); //Bit 23 -> 13
	if (x & (i << 40)) y |= (i << 60); //Bit 24 -> 4
	if (x & (i << 38)) y |= (i << 47); //Bit 26 -> 17
	if (x & (i << 37)) y |= (i << 43); //Bit 27 -> 21
	if (x & (i << 36)) y |= (i << 56); //Bit 28 -> 8
	if (x & (i << 35)) y |= (i << 17); //Bit 29 -> 47
	if (x & (i << 34)) y |= (i << 33); //Bit 30 -> 31
	if (x & (i << 33)) y |= (i << 37); //Bit 31 -> 27
	if (x & (i << 32)) y |= (i << 16); //Bit 32 -> 48
	if (x & (i << 31)) y |= (i << 29); //Bit 33 -> 35
	if (x & (i << 30)) y |= (i << 23); //Bit 34 -> 41
	if (x & (i << 28)) y |= (i << 18); //Bit 36 -> 46
	if (x & (i << 27)) y |= (i << 36); //Bit 37 -> 28
	if (x & (i << 25)) y |= (i << 25); //Bit 39 -> 39
	if (x & (i << 24)) y |= (i << 32); //Bit 40 -> 32
	if (x & (i << 23)) y |= (i << 39); //Bit 41 -> 25
	if (x & (i << 22)) y |= (i << 20); //Bit 42 -> 44
	if (x & (i << 20)) y |= (i << 27); //Bit 44 -> 37
	if (x & (i << 19)) y |= (i << 30); //Bit 45 -> 34
	if (x & (i << 18)) y |= (i << 21); //Bit 46 -> 43
	if (x & (i << 17)) y |= (i << 35); //Bit 47 -> 29
	if (x & (i << 16)) y |= (i << 28); //Bit 48 -> 36
	if (x & (i << 15)) y |= (i << 26); //Bit 49 -> 38
	if (x & (i << 14)) y |= (i << 19); //Bit 50 -> 45
	if (x & (i << 13)) y |= (i << 31); //Bit 51 -> 33
	if (x & (i << 12)) y |= (i << 38); //Bit 52 -> 26
	if (x & (i << 11)) y |= (i << 22); //Bit 53 -> 42
	if (x & (i << 9)) y |= (i << 34); //Bit 55 -> 30
	if (x & (i << 8)) y |= (i << 24); //Bit 56 -> 40

	y = y >> 16;
	return y;
}

//calculate 16 keys and store them in array keys[]
void getKeys(char keyIn[], ull keys[])
{
	ull key64 = convertKey(keyIn);
	ull key56 = compressKey1(key64);
	for (int i = 0; i < 16; i++) {
		key56 = splitRotateKey(key56, i);
		keys[i] = compressKey2(key56);
	}	
}

//performs initial permutation on current block
ull initialPermutation(ull x) 
{
	ull y = 0;
	ull i = 1;

	

	if (x & (i << 63)) y |= (i << 24); //Bit 1 -> 40
	if (x & (i << 62)) y |= (i << 56); //Bit 2 -> 8
	if (x & (i << 61)) y |= (i << 16); //Bit 3 -> 48
	if (x & (i << 60)) y |= (i << 48); //Bit 4 -> 16
	if (x & (i << 59)) y |= (i << 8); //Bit 5 -> 56
	if (x & (i << 58)) y |= (i << 40); //Bit 6 -> 24
	if (x & (i << 57)) y |= (i << 0); //Bit 7 -> 64
	if (x & (i << 56)) y |= (i << 32); //Bit 8 -> 32
	if (x & (i << 55)) y |= (i << 25); //Bit 9 -> 39
	if (x & (i << 54)) y |= (i << 57); //Bit 10 -> 7
	if (x & (i << 53)) y |= (i << 17); //Bit 11 -> 47
	if (x & (i << 52)) y |= (i << 49); //Bit 12 -> 15
	if (x & (i << 51)) y |= (i << 9); //Bit 13 -> 55
	if (x & (i << 50)) y |= (i << 41); //Bit 14 -> 23
	if (x & (i << 49)) y |= (i << 1); //Bit 15 -> 63
	if (x & (i << 48)) y |= (i << 33); //Bit 16 -> 31
	if (x & (i << 47)) y |= (i << 26); //Bit 17 -> 38
	if (x & (i << 46)) y |= (i << 58); //Bit 18 -> 6
	if (x & (i << 45)) y |= (i << 18); //Bit 19 -> 46
	if (x & (i << 44)) y |= (i << 50); //Bit 20 -> 14
	if (x & (i << 43)) y |= (i << 10); //Bit 21 -> 54
	if (x & (i << 42)) y |= (i << 42); //Bit 22 -> 22
	if (x & (i << 41)) y |= (i << 2); //Bit 23 -> 62
	if (x & (i << 40)) y |= (i << 34); //Bit 24 -> 30
	if (x & (i << 39)) y |= (i << 27); //Bit 25 -> 37
	if (x & (i << 38)) y |= (i << 59); //Bit 26 -> 5
	if (x & (i << 37)) y |= (i << 19); //Bit 27 -> 45
	if (x & (i << 36)) y |= (i << 51); //Bit 28 -> 13
	if (x & (i << 35)) y |= (i << 11); //Bit 29 -> 53
	if (x & (i << 34)) y |= (i << 43); //Bit 30 -> 21
	if (x & (i << 33)) y |= (i << 3); //Bit 31 -> 61
	if (x & (i << 32)) y |= (i << 35); //Bit 32 -> 29
	if (x & (i << 31)) y |= (i << 28); //Bit 33 -> 36
	if (x & (i << 30)) y |= (i << 60); //Bit 34 -> 4
	if (x & (i << 29)) y |= (i << 20); //Bit 35 -> 44
	if (x & (i << 28)) y |= (i << 52); //Bit 36 -> 12
	if (x & (i << 27)) y |= (i << 12); //Bit 37 -> 52
	if (x & (i << 26)) y |= (i << 44); //Bit 38 -> 20
	if (x & (i << 25)) y |= (i << 4); //Bit 39 -> 60
	if (x & (i << 24)) y |= (i << 36); //Bit 40 -> 28
	if (x & (i << 23)) y |= (i << 30); //Bit 41 -> 34
	if (x & (i << 22)) y |= (i << 61); //Bit 42 -> 3
	if (x & (i << 21)) y |= (i << 21); //Bit 43 -> 43
	if (x & (i << 20)) y |= (i << 53); //Bit 44 -> 11
	if (x & (i << 19)) y |= (i << 13); //Bit 45 -> 51
	if (x & (i << 18)) y |= (i << 45); //Bit 46 -> 19
	if (x & (i << 17)) y |= (i << 5); //Bit 47 -> 59
	if (x & (i << 16)) y |= (i << 37); //Bit 48 -> 27
	if (x & (i << 15)) y |= (i << 30); //Bit 49 -> 34
	if (x & (i << 14)) y |= (i << 62); //Bit 50 -> 2
	if (x & (i << 13)) y |= (i << 22); //Bit 51 -> 42
	if (x & (i << 12)) y |= (i << 54); //Bit 52 -> 10
	if (x & (i << 11)) y |= (i << 14); //Bit 53 -> 50
	if (x & (i << 10)) y |= (i << 46); //Bit 54 -> 18
	if (x & (i << 9)) y |= (i << 6); //Bit 55 -> 58
	if (x & (i << 8)) y |= (i << 38); //Bit 56 -> 26
	if (x & (i << 7)) y |= (i << 31); //Bit 57 -> 33
	if (x & (i << 6)) y |= (i << 63); //Bit 58 -> 1
	if (x & (i << 5)) y |= (i << 23); //Bit 59 -> 41
	if (x & (i << 4)) y |= (i << 55); //Bit 60 -> 9
	if (x & (i << 3)) y |= (i << 15); //Bit 61 -> 49
	if (x & (i << 2)) y |= (i << 47); //Bit 62 -> 17
	if (x & (i << 1)) y |= (i << 7); //Bit 63 -> 57
	if (x & (i << 0)) y |= (i << 39); //Bit 64 -> 25
	
	return y;
}

//performs final permutation on current block
ull finalPermutation(ull x)
{
	ull y = 0;
	ull i = 1;



	if (x & (i << 24)) y |= (i << 63); //Bit 40 -> 1
	if (x & (i << 56)) y |= (i << 62); //Bit 8 -> 2
	if (x & (i << 16)) y |= (i << 61); //Bit 48 -> 3
	if (x & (i << 48)) y |= (i << 60); //Bit 16 -> 4
	if (x & (i << 8)) y |= (i << 59); //Bit 56 -> 5
	if (x & (i << 40)) y |= (i << 58); //Bit 24 -> 6
	if (x & (i << 0)) y |= (i << 57); //Bit 64 -> 7
	if (x & (i << 32)) y |= (i << 56); //Bit 32 -> 8
	if (x & (i << 25)) y |= (i << 55); //Bit 39 -> 9
	if (x & (i << 57)) y |= (i << 54); //Bit 7 -> 10
	if (x & (i << 17)) y |= (i << 53); //Bit 47 -> 11
	if (x & (i << 49)) y |= (i << 52); //Bit 15 -> 12
	if (x & (i << 9)) y |= (i << 51); //Bit 55 -> 13
	if (x & (i << 41)) y |= (i << 50); //Bit 23 -> 14
	if (x & (i << 1)) y |= (i << 49); //Bit 63 -> 15
	if (x & (i << 33)) y |= (i << 48); //Bit 31 -> 16
	if (x & (i << 26)) y |= (i << 47); //Bit 38 -> 17
	if (x & (i << 58)) y |= (i << 46); //Bit 6 -> 18
	if (x & (i << 18)) y |= (i << 45); //Bit 46 -> 19
	if (x & (i << 50)) y |= (i << 44); //Bit 14 -> 20
	if (x & (i << 10)) y |= (i << 43); //Bit 54 -> 21
	if (x & (i << 42)) y |= (i << 42); //Bit 22 -> 22
	if (x & (i << 2)) y |= (i << 41); //Bit 62 -> 23
	if (x & (i << 34)) y |= (i << 40); //Bit 30 -> 24
	if (x & (i << 27)) y |= (i << 39); //Bit 37 -> 25
	if (x & (i << 59)) y |= (i << 38); //Bit 5 -> 26
	if (x & (i << 19)) y |= (i << 37); //Bit 45 -> 27
	if (x & (i << 51)) y |= (i << 36); //Bit 13 -> 28
	if (x & (i << 11)) y |= (i << 35); //Bit 53 -> 29
	if (x & (i << 43)) y |= (i << 34); //Bit 21 -> 30
	if (x & (i << 3)) y |= (i << 33); //Bit 61 -> 31
	if (x & (i << 35)) y |= (i << 32); //Bit 29 -> 32
	if (x & (i << 28)) y |= (i << 31); //Bit 36 -> 33
	if (x & (i << 60)) y |= (i << 30); //Bit 4 -> 34
	if (x & (i << 20)) y |= (i << 29); //Bit 44 -> 35
	if (x & (i << 52)) y |= (i << 28); //Bit 12 -> 36
	if (x & (i << 12)) y |= (i << 27); //Bit 52 -> 37
	if (x & (i << 44)) y |= (i << 26); //Bit 20 -> 38
	if (x & (i << 4)) y |= (i << 25); //Bit 60 -> 39
	if (x & (i << 36)) y |= (i << 24); //Bit 28 -> 40
	if (x & (i << 30)) y |= (i << 23); //Bit 34 -> 41
	if (x & (i << 61)) y |= (i << 22); //Bit 3 -> 42
	if (x & (i << 21)) y |= (i << 21); //Bit 43 -> 43
	if (x & (i << 53)) y |= (i << 20); //Bit 11 -> 44
	if (x & (i << 13)) y |= (i << 19); //Bit 51 -> 45
	if (x & (i << 45)) y |= (i << 18); //Bit 19 -> 46
	if (x & (i << 5)) y |= (i << 17); //Bit 59 -> 47
	if (x & (i << 37)) y |= (i << 16); //Bit 27 -> 48
	if (x & (i << 30)) y |= (i << 15); //Bit 34 -> 49
	if (x & (i << 62)) y |= (i << 14); //Bit 2 -> 50
	if (x & (i << 22)) y |= (i << 13); //Bit 42 -> 51
	if (x & (i << 54)) y |= (i << 12); //Bit 10 -> 52
	if (x & (i << 14)) y |= (i << 11); //Bit 50 -> 53
	if (x & (i << 46)) y |= (i << 10); //Bit 18 -> 54
	if (x & (i << 6)) y |= (i << 9); //Bit 58 -> 55
	if (x & (i << 38)) y |= (i << 8); //Bit 26 -> 56
	if (x & (i << 31)) y |= (i << 7); //Bit 33 -> 57
	if (x & (i << 63)) y |= (i << 6); //Bit 1 -> 58
	if (x & (i << 23)) y |= (i << 5); //Bit 41 -> 59
	if (x & (i << 55)) y |= (i << 4); //Bit 9 -> 60
	if (x & (i << 15)) y |= (i << 3); //Bit 49 -> 61
	if (x & (i << 47)) y |= (i << 2); //Bit 17 -> 62
	if (x & (i << 7)) y |= (i << 1); //Bit 57 -> 63
	if (x & (i << 39)) y |= (i << 0); //Bit 25 -> 64


	return y;
}

//performs right half expansion permutation on x
ull expandBlock(ull x)
{
	ull y = 0, i = 1;

	if (x & (i << 31)) y |= (i << 62); //Bit 1 -> 2
	if (x & (i << 31)) y |= (i << 16); //Bit 1 -> 48
	if (x & (i << 30)) y |= (i << 61); //Bit 2 -> 3
	if (x & (i << 29)) y |= (i << 60); //Bit 3 -> 4
	if (x & (i << 28)) y |= (i << 59); //Bit 4 -> 5
	if (x & (i << 28)) y |= (i << 57); //Bit 4 -> 7
	if (x & (i << 27)) y |= (i << 58); //Bit 5 -> 6
	if (x & (i << 27)) y |= (i << 56); //Bit 5 -> 8
	if (x & (i << 26)) y |= (i << 55); //Bit 6 -> 9
	if (x & (i << 25)) y |= (i << 54); //Bit 7 -> 10
	if (x & (i << 24)) y |= (i << 53); //Bit 8 -> 11
	if (x & (i << 24)) y |= (i << 51); //Bit 8 -> 13
	if (x & (i << 23)) y |= (i << 52); //Bit 9 -> 12
	if (x & (i << 23)) y |= (i << 50); //Bit 9 -> 14
	if (x & (i << 22)) y |= (i << 49); //Bit 10 -> 15
	if (x & (i << 21)) y |= (i << 48); //Bit 11 -> 16
	if (x & (i << 20)) y |= (i << 47); //Bit 12 -> 17
	if (x & (i << 20)) y |= (i << 45); //Bit 12 -> 19
	if (x & (i << 19)) y |= (i << 46); //Bit 13 -> 18
	if (x & (i << 19)) y |= (i << 44); //Bit 13 -> 20
	if (x & (i << 18)) y |= (i << 43); //Bit 14 -> 21
	if (x & (i << 17)) y |= (i << 42); //Bit 15 -> 22
	if (x & (i << 16)) y |= (i << 41); //Bit 16 -> 23
	if (x & (i << 16)) y |= (i << 39); //Bit 16 -> 25
	if (x & (i << 15)) y |= (i << 40); //Bit 17 -> 24
	if (x & (i << 15)) y |= (i << 38); //Bit 17 -> 26
	if (x & (i << 14)) y |= (i << 37); //Bit 18 -> 27
	if (x & (i << 13)) y |= (i << 36); //Bit 19 -> 28
	if (x & (i << 12)) y |= (i << 35); //Bit 20 -> 29
	if (x & (i << 12)) y |= (i << 33); //Bit 20 -> 31
	if (x & (i << 11)) y |= (i << 34); //Bit 21 -> 30
	if (x & (i << 11)) y |= (i << 32); //Bit 21 -> 32
	if (x & (i << 10)) y |= (i << 31); //Bit 22 -> 33
	if (x & (i << 9)) y |= (i << 30); //Bit 23 -> 34
	if (x & (i << 8)) y |= (i << 29); //Bit 24 -> 35
	if (x & (i << 8)) y |= (i << 27); //Bit 24 -> 37
	if (x & (i << 7)) y |= (i << 28); //Bit 25 -> 36
	if (x & (i << 7)) y |= (i << 26); //Bit 25 -> 38
	if (x & (i << 6)) y |= (i << 25); //Bit 26 -> 39
	if (x & (i << 5)) y |= (i << 24); //Bit 27 -> 40
	if (x & (i << 4)) y |= (i << 23); //Bit 28 -> 41
	if (x & (i << 4)) y |= (i << 21); //Bit 28 -> 43
	if (x & (i << 3)) y |= (i << 22); //Bit 29 -> 42
	if (x & (i << 3)) y |= (i << 20); //Bit 29 -> 44
	if (x & (i << 2)) y |= (i << 19); //Bit 30 -> 45
	if (x & (i << 1)) y |= (i << 18); //Bit 31 -> 46
	if (x & (i << 0)) y |= (i << 17); //Bit 32 -> 47
	if (x & (i << 0)) y |= (i << 63); //Bit 32 -> 1



	y = y >> 16;
	return y;

}

//perform substitutions on 8 8 bit blocks from x
ull substitutions(ull x)
{
	ull temp = x; //temp storage for calculations
	ull b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0, b7 = 0, b8 = 0; //in blocks
	ull c, r, r1, r2; //column and row calculations
	ull o1 = 0, o2 = 0, o3 = 0, o4 = 0, o5 = 0, o6 = 0, o7 = 0, o8 = 0; //out blocks
	ull y = 0; //output

	//break x into 6 bit blocks
	temp = x >> 42;
	b1 = temp;
	temp = x >> 36;
	b2 = temp & 63;
	temp = x >> 30;
	b3 = temp & 63;
	temp = x >> 24;
	b4 = temp & 63;
	temp = x >> 18;
	b5 = temp & 63;
	temp = x >> 12;
	b6 = temp & 63;
	temp = x >> 6;
	b7 = temp & 63;
	temp = x;
	b8 = temp & 63;


	//S-Blocks
	{
		//S1
		{
			c = (b1 & 30) >> 1;
			r1 = (b1 & 1);
			r2 = (b1 & 32) >> 4;
			r = r1 ^ r2;

			if (c == 0 && r == 0) o1 = 14;
			if (c == 1 && r == 0) o1 = 4;
			if (c == 2 && r == 0) o1 = 13;
			if (c == 3 && r == 0) o1 = 1;
			if (c == 4 && r == 0) o1 = 2;
			if (c == 5 && r == 0) o1 = 15;
			if (c == 6 && r == 0) o1 = 11;
			if (c == 7 && r == 0) o1 = 8;
			if (c == 8 && r == 0) o1 = 3;
			if (c == 9 && r == 0) o1 = 10;
			if (c == 10 && r == 0) o1 = 6;
			if (c == 11 && r == 0) o1 = 12;
			if (c == 12 && r == 0) o1 = 5;
			if (c == 13 && r == 0) o1 = 9;
			if (c == 14 && r == 0) o1 = 0;
			if (c == 15 && r == 0) o1 = 7;
			if (c == 0 && r == 1) o1 = 0;
			if (c == 1 && r == 1) o1 = 15;
			if (c == 2 && r == 1) o1 = 7;
			if (c == 3 && r == 1) o1 = 4;
			if (c == 4 && r == 1) o1 = 14;
			if (c == 5 && r == 1) o1 = 2;
			if (c == 6 && r == 1) o1 = 13;
			if (c == 7 && r == 1) o1 = 1;
			if (c == 8 && r == 1) o1 = 10;
			if (c == 9 && r == 1) o1 = 6;
			if (c == 10 && r == 1) o1 = 12;
			if (c == 11 && r == 1) o1 = 11;
			if (c == 12 && r == 1) o1 = 9;
			if (c == 13 && r == 1) o1 = 5;
			if (c == 14 && r == 1) o1 = 3;
			if (c == 15 && r == 1) o1 = 8;
			if (c == 0 && r == 2) o1 = 4;
			if (c == 1 && r == 2) o1 = 1;
			if (c == 2 && r == 2) o1 = 14;
			if (c == 3 && r == 2) o1 = 8;
			if (c == 4 && r == 2) o1 = 13;
			if (c == 5 && r == 2) o1 = 6;
			if (c == 6 && r == 2) o1 = 2;
			if (c == 7 && r == 2) o1 = 11;
			if (c == 8 && r == 2) o1 = 15;
			if (c == 9 && r == 2) o1 = 12;
			if (c == 10 && r == 2) o1 = 9;
			if (c == 11 && r == 2) o1 = 7;
			if (c == 12 && r == 2) o1 = 3;
			if (c == 13 && r == 2) o1 = 10;
			if (c == 14 && r == 2) o1 = 5;
			if (c == 15 && r == 2) o1 = 0;
			if (c == 0 && r == 3) o1 = 15;
			if (c == 1 && r == 3) o1 = 12;
			if (c == 2 && r == 3) o1 = 8;
			if (c == 3 && r == 3) o1 = 2;
			if (c == 4 && r == 3) o1 = 4;
			if (c == 5 && r == 3) o1 = 9;
			if (c == 6 && r == 3) o1 = 1;
			if (c == 7 && r == 3) o1 = 7;
			if (c == 8 && r == 3) o1 = 5;
			if (c == 9 && r == 3) o1 = 11;
			if (c == 10 && r == 3) o1 = 3;
			if (c == 11 && r == 3) o1 = 14;
			if (c == 12 && r == 3) o1 = 10;
			if (c == 13 && r == 3) o1 = 0;
			if (c == 14 && r == 3) o1 = 6;
			if (c == 15 && r == 3) o1 = 13;
		}

		//S2
		{
			c = (b2 & 30) >> 1;
			r1 = (b2 & 1);
			r2 = (b2 & 32) >> 4;
			r = r1 ^ r2;


			if (c == 0 && r == 0) o2 = 15;
			if (c == 1 && r == 0) o2 = 1;
			if (c == 2 && r == 0) o2 = 8;
			if (c == 3 && r == 0) o2 = 14;
			if (c == 4 && r == 0) o2 = 6;
			if (c == 5 && r == 0) o2 = 11;
			if (c == 6 && r == 0) o2 = 3;
			if (c == 7 && r == 0) o2 = 4;
			if (c == 8 && r == 0) o2 = 9;
			if (c == 9 && r == 0) o2 = 7;
			if (c == 10 && r == 0) o2 = 2;
			if (c == 11 && r == 0) o2 = 13;
			if (c == 12 && r == 0) o2 = 12;
			if (c == 13 && r == 0) o2 = 0;
			if (c == 14 && r == 0) o2 = 5;
			if (c == 15 && r == 0) o2 = 10;
			if (c == 0 && r == 1) o2 = 3;
			if (c == 1 && r == 1) o2 = 13;
			if (c == 2 && r == 1) o2 = 4;
			if (c == 3 && r == 1) o2 = 7;
			if (c == 4 && r == 1) o2 = 15;
			if (c == 5 && r == 1) o2 = 2;
			if (c == 6 && r == 1) o2 = 8;
			if (c == 7 && r == 1) o2 = 14;
			if (c == 8 && r == 1) o2 = 12;
			if (c == 9 && r == 1) o2 = 0;
			if (c == 10 && r == 1) o2 = 1;
			if (c == 11 && r == 1) o2 = 10;
			if (c == 12 && r == 1) o2 = 6;
			if (c == 13 && r == 1) o2 = 9;
			if (c == 14 && r == 1) o2 = 11;
			if (c == 15 && r == 1) o2 = 5;
			if (c == 0 && r == 2) o2 = 0;
			if (c == 1 && r == 2) o2 = 14;
			if (c == 2 && r == 2) o2 = 7;
			if (c == 3 && r == 2) o2 = 11;
			if (c == 4 && r == 2) o2 = 10;
			if (c == 5 && r == 2) o2 = 4;
			if (c == 6 && r == 2) o2 = 13;
			if (c == 7 && r == 2) o2 = 1;
			if (c == 8 && r == 2) o2 = 5;
			if (c == 9 && r == 2) o2 = 8;
			if (c == 10 && r == 2) o2 = 12;
			if (c == 11 && r == 2) o2 = 6;
			if (c == 12 && r == 2) o2 = 9;
			if (c == 13 && r == 2) o2 = 3;
			if (c == 14 && r == 2) o2 = 2;
			if (c == 15 && r == 2) o2 = 15;
			if (c == 0 && r == 3) o2 = 13;
			if (c == 1 && r == 3) o2 = 8;
			if (c == 2 && r == 3) o2 = 10;
			if (c == 3 && r == 3) o2 = 1;
			if (c == 4 && r == 3) o2 = 3;
			if (c == 5 && r == 3) o2 = 15;
			if (c == 6 && r == 3) o2 = 4;
			if (c == 7 && r == 3) o2 = 2;
			if (c == 8 && r == 3) o2 = 11;
			if (c == 9 && r == 3) o2 = 6;
			if (c == 10 && r == 3) o2 = 7;
			if (c == 11 && r == 3) o2 = 12;
			if (c == 12 && r == 3) o2 = 0;
			if (c == 13 && r == 3) o2 = 5;
			if (c == 14 && r == 3) o2 = 14;
			if (c == 15 && r == 3) o2 = 9;
		}

		//S3
		{
			c = (b3 & 30) >> 1;
			r1 = (b3 & 1);
			r2 = (b3 & 32) >> 4;
			r = r1 ^ r2;

			if (c == 0 && r == 0) o3 = 10;
			if (c == 1 && r == 0) o3 = 0;
			if (c == 2 && r == 0) o3 = 9;
			if (c == 3 && r == 0) o3 = 14;
			if (c == 4 && r == 0) o3 = 6;
			if (c == 5 && r == 0) o3 = 3;
			if (c == 6 && r == 0) o3 = 15;
			if (c == 7 && r == 0) o3 = 5;
			if (c == 8 && r == 0) o3 = 1;
			if (c == 9 && r == 0) o3 = 13;
			if (c == 10 && r == 0) o3 = 12;
			if (c == 11 && r == 0) o3 = 7;
			if (c == 12 && r == 0) o3 = 11;
			if (c == 13 && r == 0) o3 = 4;
			if (c == 14 && r == 0) o3 = 2;
			if (c == 15 && r == 0) o3 = 8;
			if (c == 0 && r == 1) o3 = 13;
			if (c == 1 && r == 1) o3 = 7;
			if (c == 2 && r == 1) o3 = 0;
			if (c == 3 && r == 1) o3 = 9;
			if (c == 4 && r == 1) o3 = 3;
			if (c == 5 && r == 1) o3 = 4;
			if (c == 6 && r == 1) o3 = 6;
			if (c == 7 && r == 1) o3 = 10;
			if (c == 8 && r == 1) o3 = 2;
			if (c == 9 && r == 1) o3 = 8;
			if (c == 10 && r == 1) o3 = 5;
			if (c == 11 && r == 1) o3 = 14;
			if (c == 12 && r == 1) o3 = 12;
			if (c == 13 && r == 1) o3 = 11;
			if (c == 14 && r == 1) o3 = 15;
			if (c == 15 && r == 1) o3 = 1;
			if (c == 0 && r == 2) o3 = 13;
			if (c == 1 && r == 2) o3 = 6;
			if (c == 2 && r == 2) o3 = 4;
			if (c == 3 && r == 2) o3 = 9;
			if (c == 4 && r == 2) o3 = 8;
			if (c == 5 && r == 2) o3 = 15;
			if (c == 6 && r == 2) o3 = 3;
			if (c == 7 && r == 2) o3 = 0;
			if (c == 8 && r == 2) o3 = 11;
			if (c == 9 && r == 2) o3 = 1;
			if (c == 10 && r == 2) o3 = 2;
			if (c == 11 && r == 2) o3 = 12;
			if (c == 12 && r == 2) o3 = 5;
			if (c == 13 && r == 2) o3 = 10;
			if (c == 14 && r == 2) o3 = 14;
			if (c == 15 && r == 2) o3 = 7;
			if (c == 0 && r == 3) o3 = 1;
			if (c == 1 && r == 3) o3 = 10;
			if (c == 2 && r == 3) o3 = 13;
			if (c == 3 && r == 3) o3 = 0;
			if (c == 4 && r == 3) o3 = 6;
			if (c == 5 && r == 3) o3 = 9;
			if (c == 6 && r == 3) o3 = 8;
			if (c == 7 && r == 3) o3 = 7;
			if (c == 8 && r == 3) o3 = 4;
			if (c == 9 && r == 3) o3 = 15;
			if (c == 10 && r == 3) o3 = 14;
			if (c == 11 && r == 3) o3 = 3;
			if (c == 12 && r == 3) o3 = 11;
			if (c == 13 && r == 3) o3 = 5;
			if (c == 14 && r == 3) o3 = 2;
			if (c == 15 && r == 3) o3 = 12;
		}

		//S4
		{
			c = (b4 & 30) >> 1;
			r1 = (b4 & 1);
			r2 = (b4 & 32) >> 4;
			r = r1 ^ r2;

			if (c == 0 && r == 0) o4 = 7;
			if (c == 1 && r == 0) o4 = 13;
			if (c == 2 && r == 0) o4 = 14;
			if (c == 3 && r == 0) o4 = 3;
			if (c == 4 && r == 0) o4 = 0;
			if (c == 5 && r == 0) o4 = 6;
			if (c == 6 && r == 0) o4 = 9;
			if (c == 7 && r == 0) o4 = 10;
			if (c == 8 && r == 0) o4 = 1;
			if (c == 9 && r == 0) o4 = 2;
			if (c == 10 && r == 0) o4 = 8;
			if (c == 11 && r == 0) o4 = 5;
			if (c == 12 && r == 0) o4 = 11;
			if (c == 13 && r == 0) o4 = 12;
			if (c == 14 && r == 0) o4 = 4;
			if (c == 15 && r == 0) o4 = 15;
			if (c == 0 && r == 1) o4 = 13;
			if (c == 1 && r == 1) o4 = 8;
			if (c == 2 && r == 1) o4 = 11;
			if (c == 3 && r == 1) o4 = 5;
			if (c == 4 && r == 1) o4 = 6;
			if (c == 5 && r == 1) o4 = 15;
			if (c == 6 && r == 1) o4 = 0;
			if (c == 7 && r == 1) o4 = 3;
			if (c == 8 && r == 1) o4 = 4;
			if (c == 9 && r == 1) o4 = 7;
			if (c == 10 && r == 1) o4 = 2;
			if (c == 11 && r == 1) o4 = 12;
			if (c == 12 && r == 1) o4 = 1;
			if (c == 13 && r == 1) o4 = 10;
			if (c == 14 && r == 1) o4 = 14;
			if (c == 15 && r == 1) o4 = 9;
			if (c == 0 && r == 2) o4 = 10;
			if (c == 1 && r == 2) o4 = 6;
			if (c == 2 && r == 2) o4 = 9;
			if (c == 3 && r == 2) o4 = 0;
			if (c == 4 && r == 2) o4 = 12;
			if (c == 5 && r == 2) o4 = 11;
			if (c == 6 && r == 2) o4 = 7;
			if (c == 7 && r == 2) o4 = 13;
			if (c == 8 && r == 2) o4 = 15;
			if (c == 9 && r == 2) o4 = 1;
			if (c == 10 && r == 2) o4 = 3;
			if (c == 11 && r == 2) o4 = 14;
			if (c == 12 && r == 2) o4 = 5;
			if (c == 13 && r == 2) o4 = 2;
			if (c == 14 && r == 2) o4 = 8;
			if (c == 15 && r == 2) o4 = 4;
			if (c == 0 && r == 3) o4 = 3;
			if (c == 1 && r == 3) o4 = 15;
			if (c == 2 && r == 3) o4 = 0;
			if (c == 3 && r == 3) o4 = 6;
			if (c == 4 && r == 3) o4 = 10;
			if (c == 5 && r == 3) o4 = 1;
			if (c == 6 && r == 3) o4 = 13;
			if (c == 7 && r == 3) o4 = 8;
			if (c == 8 && r == 3) o4 = 9;
			if (c == 9 && r == 3) o4 = 4;
			if (c == 10 && r == 3) o4 = 5;
			if (c == 11 && r == 3) o4 = 11;
			if (c == 12 && r == 3) o4 = 12;
			if (c == 13 && r == 3) o4 = 7;
			if (c == 14 && r == 3) o4 = 2;
			if (c == 15 && r == 3) o4 = 14;
		}

		//S5
		{
			c = (b5 & 30) >> 1;
			r1 = (b5 & 1);
			r2 = (b5 & 32) >> 4;
			r = r1 ^ r2;

			if (c == 0 && r == 0) o5 = 2;
			if (c == 1 && r == 0) o5 = 12;
			if (c == 2 && r == 0) o5 = 4;
			if (c == 3 && r == 0) o5 = 1;
			if (c == 4 && r == 0) o5 = 7;
			if (c == 5 && r == 0) o5 = 10;
			if (c == 6 && r == 0) o5 = 11;
			if (c == 7 && r == 0) o5 = 6;
			if (c == 8 && r == 0) o5 = 8;
			if (c == 9 && r == 0) o5 = 5;
			if (c == 10 && r == 0) o5 = 3;
			if (c == 11 && r == 0) o5 = 15;
			if (c == 12 && r == 0) o5 = 13;
			if (c == 13 && r == 0) o5 = 0;
			if (c == 14 && r == 0) o5 = 14;
			if (c == 15 && r == 0) o5 = 9;
			if (c == 0 && r == 1) o5 = 14;
			if (c == 1 && r == 1) o5 = 11;
			if (c == 2 && r == 1) o5 = 2;
			if (c == 3 && r == 1) o5 = 12;
			if (c == 4 && r == 1) o5 = 4;
			if (c == 5 && r == 1) o5 = 7;
			if (c == 6 && r == 1) o5 = 13;
			if (c == 7 && r == 1) o5 = 1;
			if (c == 8 && r == 1) o5 = 5;
			if (c == 9 && r == 1) o5 = 0;
			if (c == 10 && r == 1) o5 = 15;
			if (c == 11 && r == 1) o5 = 10;
			if (c == 12 && r == 1) o5 = 3;
			if (c == 13 && r == 1) o5 = 9;
			if (c == 14 && r == 1) o5 = 8;
			if (c == 15 && r == 1) o5 = 6;
			if (c == 0 && r == 2) o5 = 4;
			if (c == 1 && r == 2) o5 = 2;
			if (c == 2 && r == 2) o5 = 1;
			if (c == 3 && r == 2) o5 = 11;
			if (c == 4 && r == 2) o5 = 10;
			if (c == 5 && r == 2) o5 = 13;
			if (c == 6 && r == 2) o5 = 7;
			if (c == 7 && r == 2) o5 = 8;
			if (c == 8 && r == 2) o5 = 15;
			if (c == 9 && r == 2) o5 = 9;
			if (c == 10 && r == 2) o5 = 12;
			if (c == 11 && r == 2) o5 = 5;
			if (c == 12 && r == 2) o5 = 6;
			if (c == 13 && r == 2) o5 = 3;
			if (c == 14 && r == 2) o5 = 0;
			if (c == 15 && r == 2) o5 = 14;
			if (c == 0 && r == 3) o5 = 11;
			if (c == 1 && r == 3) o5 = 8;
			if (c == 2 && r == 3) o5 = 12;
			if (c == 3 && r == 3) o5 = 7;
			if (c == 4 && r == 3) o5 = 1;
			if (c == 5 && r == 3) o5 = 14;
			if (c == 6 && r == 3) o5 = 2;
			if (c == 7 && r == 3) o5 = 13;
			if (c == 8 && r == 3) o5 = 6;
			if (c == 9 && r == 3) o5 = 15;
			if (c == 10 && r == 3) o5 = 0;
			if (c == 11 && r == 3) o5 = 9;
			if (c == 12 && r == 3) o5 = 10;
			if (c == 13 && r == 3) o5 = 4;
			if (c == 14 && r == 3) o5 = 5;
			if (c == 15 && r == 3) o5 = 3;
		}

		//S6
		{
			c = (b6 & 30) >> 1;
			r1 = (b6 & 1);
			r2 = (b6 & 32) >> 4;
			r = r1 ^ r2;

			if (c == 0 && r == 0) o6 = 12;
			if (c == 1 && r == 0) o6 = 1;
			if (c == 2 && r == 0) o6 = 10;
			if (c == 3 && r == 0) o6 = 15;
			if (c == 4 && r == 0) o6 = 9;
			if (c == 5 && r == 0) o6 = 2;
			if (c == 6 && r == 0) o6 = 6;
			if (c == 7 && r == 0) o6 = 8;
			if (c == 8 && r == 0) o6 = 0;
			if (c == 9 && r == 0) o6 = 13;
			if (c == 10 && r == 0) o6 = 3;
			if (c == 11 && r == 0) o6 = 4;
			if (c == 12 && r == 0) o6 = 14;
			if (c == 13 && r == 0) o6 = 7;
			if (c == 14 && r == 0) o6 = 5;
			if (c == 15 && r == 0) o6 = 11;
			if (c == 0 && r == 1) o6 = 10;
			if (c == 1 && r == 1) o6 = 15;
			if (c == 2 && r == 1) o6 = 4;
			if (c == 3 && r == 1) o6 = 2;
			if (c == 4 && r == 1) o6 = 7;
			if (c == 5 && r == 1) o6 = 12;
			if (c == 6 && r == 1) o6 = 9;
			if (c == 7 && r == 1) o6 = 5;
			if (c == 8 && r == 1) o6 = 6;
			if (c == 9 && r == 1) o6 = 1;
			if (c == 10 && r == 1) o6 = 13;
			if (c == 11 && r == 1) o6 = 14;
			if (c == 12 && r == 1) o6 = 0;
			if (c == 13 && r == 1) o6 = 11;
			if (c == 14 && r == 1) o6 = 3;
			if (c == 15 && r == 1) o6 = 8;
			if (c == 0 && r == 2) o6 = 9;
			if (c == 1 && r == 2) o6 = 14;
			if (c == 2 && r == 2) o6 = 15;
			if (c == 3 && r == 2) o6 = 5;
			if (c == 4 && r == 2) o6 = 2;
			if (c == 5 && r == 2) o6 = 8;
			if (c == 6 && r == 2) o6 = 12;
			if (c == 7 && r == 2) o6 = 3;
			if (c == 8 && r == 2) o6 = 7;
			if (c == 9 && r == 2) o6 = 0;
			if (c == 10 && r == 2) o6 = 4;
			if (c == 11 && r == 2) o6 = 10;
			if (c == 12 && r == 2) o6 = 1;
			if (c == 13 && r == 2) o6 = 13;
			if (c == 14 && r == 2) o6 = 11;
			if (c == 15 && r == 2) o6 = 6;
			if (c == 0 && r == 3) o6 = 4;
			if (c == 1 && r == 3) o6 = 3;
			if (c == 2 && r == 3) o6 = 2;
			if (c == 3 && r == 3) o6 = 12;
			if (c == 4 && r == 3) o6 = 9;
			if (c == 5 && r == 3) o6 = 5;
			if (c == 6 && r == 3) o6 = 15;
			if (c == 7 && r == 3) o6 = 10;
			if (c == 8 && r == 3) o6 = 11;
			if (c == 9 && r == 3) o6 = 14;
			if (c == 10 && r == 3) o6 = 1;
			if (c == 11 && r == 3) o6 = 7;
			if (c == 12 && r == 3) o6 = 6;
			if (c == 13 && r == 3) o6 = 0;
			if (c == 14 && r == 3) o6 = 8;
			if (c == 15 && r == 3) o6 = 13;
		}

		//S7
		{
			c = (b7 & 30) >> 1;
			r1 = (b7 & 1);
			r2 = (b7 & 32) >> 4;
			r = r1 ^ r2;

			if (c == 0 && r == 0) o7 = 4;
			if (c == 1 && r == 0) o7 = 11;
			if (c == 2 && r == 0) o7 = 2;
			if (c == 3 && r == 0) o7 = 14;
			if (c == 4 && r == 0) o7 = 15;
			if (c == 5 && r == 0) o7 = 0;
			if (c == 6 && r == 0) o7 = 8;
			if (c == 7 && r == 0) o7 = 13;
			if (c == 8 && r == 0) o7 = 3;
			if (c == 9 && r == 0) o7 = 12;
			if (c == 10 && r == 0) o7 = 9;
			if (c == 11 && r == 0) o7 = 7;
			if (c == 12 && r == 0) o7 = 5;
			if (c == 13 && r == 0) o7 = 10;
			if (c == 14 && r == 0) o7 = 6;
			if (c == 15 && r == 0) o7 = 1;
			if (c == 0 && r == 1) o7 = 13;
			if (c == 1 && r == 1) o7 = 0;
			if (c == 2 && r == 1) o7 = 11;
			if (c == 3 && r == 1) o7 = 7;
			if (c == 4 && r == 1) o7 = 4;
			if (c == 5 && r == 1) o7 = 9;
			if (c == 6 && r == 1) o7 = 1;
			if (c == 7 && r == 1) o7 = 10;
			if (c == 8 && r == 1) o7 = 14;
			if (c == 9 && r == 1) o7 = 3;
			if (c == 10 && r == 1) o7 = 5;
			if (c == 11 && r == 1) o7 = 12;
			if (c == 12 && r == 1) o7 = 2;
			if (c == 13 && r == 1) o7 = 15;
			if (c == 14 && r == 1) o7 = 8;
			if (c == 15 && r == 1) o7 = 6;
			if (c == 0 && r == 2) o7 = 1;
			if (c == 1 && r == 2) o7 = 4;
			if (c == 2 && r == 2) o7 = 11;
			if (c == 3 && r == 2) o7 = 13;
			if (c == 4 && r == 2) o7 = 12;
			if (c == 5 && r == 2) o7 = 3;
			if (c == 6 && r == 2) o7 = 7;
			if (c == 7 && r == 2) o7 = 14;
			if (c == 8 && r == 2) o7 = 10;
			if (c == 9 && r == 2) o7 = 15;
			if (c == 10 && r == 2) o7 = 6;
			if (c == 11 && r == 2) o7 = 8;
			if (c == 12 && r == 2) o7 = 0;
			if (c == 13 && r == 2) o7 = 5;
			if (c == 14 && r == 2) o7 = 9;
			if (c == 15 && r == 2) o7 = 2;
			if (c == 0 && r == 3) o7 = 6;
			if (c == 1 && r == 3) o7 = 11;
			if (c == 2 && r == 3) o7 = 13;
			if (c == 3 && r == 3) o7 = 8;
			if (c == 4 && r == 3) o7 = 1;
			if (c == 5 && r == 3) o7 = 4;
			if (c == 6 && r == 3) o7 = 10;
			if (c == 7 && r == 3) o7 = 7;
			if (c == 8 && r == 3) o7 = 9;
			if (c == 9 && r == 3) o7 = 5;
			if (c == 10 && r == 3) o7 = 0;
			if (c == 11 && r == 3) o7 = 15;
			if (c == 12 && r == 3) o7 = 14;
			if (c == 13 && r == 3) o7 = 2;
			if (c == 14 && r == 3) o7 = 3;
			if (c == 15 && r == 3) o7 = 12;

		}

		//S8
		{
			c = (b8 & 30) >> 1;
			r1 = (b8 & 1);
			r2 = (b8 & 32) >> 4;
			r = r1 ^ r2;

			if (c == 0 && r == 0) o8 = 13;
			if (c == 1 && r == 0) o8 = 2;
			if (c == 2 && r == 0) o8 = 8;
			if (c == 3 && r == 0) o8 = 4;
			if (c == 4 && r == 0) o8 = 6;
			if (c == 5 && r == 0) o8 = 15;
			if (c == 6 && r == 0) o8 = 11;
			if (c == 7 && r == 0) o8 = 1;
			if (c == 8 && r == 0) o8 = 10;
			if (c == 9 && r == 0) o8 = 9;
			if (c == 10 && r == 0) o8 = 3;
			if (c == 11 && r == 0) o8 = 14;
			if (c == 12 && r == 0) o8 = 5;
			if (c == 13 && r == 0) o8 = 0;
			if (c == 14 && r == 0) o8 = 12;
			if (c == 15 && r == 0) o8 = 7;
			if (c == 0 && r == 1) o8 = 1;
			if (c == 1 && r == 1) o8 = 15;
			if (c == 2 && r == 1) o8 = 13;
			if (c == 3 && r == 1) o8 = 8;
			if (c == 4 && r == 1) o8 = 10;
			if (c == 5 && r == 1) o8 = 3;
			if (c == 6 && r == 1) o8 = 7;
			if (c == 7 && r == 1) o8 = 4;
			if (c == 8 && r == 1) o8 = 12;
			if (c == 9 && r == 1) o8 = 5;
			if (c == 10 && r == 1) o8 = 6;
			if (c == 11 && r == 1) o8 = 11;
			if (c == 12 && r == 1) o8 = 0;
			if (c == 13 && r == 1) o8 = 14;
			if (c == 14 && r == 1) o8 = 9;
			if (c == 15 && r == 1) o8 = 2;
			if (c == 0 && r == 2) o8 = 7;
			if (c == 1 && r == 2) o8 = 11;
			if (c == 2 && r == 2) o8 = 4;
			if (c == 3 && r == 2) o8 = 1;
			if (c == 4 && r == 2) o8 = 9;
			if (c == 5 && r == 2) o8 = 12;
			if (c == 6 && r == 2) o8 = 14;
			if (c == 7 && r == 2) o8 = 2;
			if (c == 8 && r == 2) o8 = 0;
			if (c == 9 && r == 2) o8 = 6;
			if (c == 10 && r == 2) o8 = 10;
			if (c == 11 && r == 2) o8 = 13;
			if (c == 12 && r == 2) o8 = 15;
			if (c == 13 && r == 2) o8 = 3;
			if (c == 14 && r == 2) o8 = 5;
			if (c == 15 && r == 2) o8 = 8;
			if (c == 0 && r == 3) o8 = 2;
			if (c == 1 && r == 3) o8 = 1;
			if (c == 2 && r == 3) o8 = 14;
			if (c == 3 && r == 3) o8 = 7;
			if (c == 4 && r == 3) o8 = 4;
			if (c == 5 && r == 3) o8 = 10;
			if (c == 6 && r == 3) o8 = 8;
			if (c == 7 && r == 3) o8 = 13;
			if (c == 8 && r == 3) o8 = 15;
			if (c == 9 && r == 3) o8 = 12;
			if (c == 10 && r == 3) o8 = 9;
			if (c == 11 && r == 3) o8 = 0;
			if (c == 12 && r == 3) o8 = 3;
			if (c == 13 && r == 3) o8 = 5;
			if (c == 14 && r == 3) o8 = 6;
			if (c == 15 && r == 3) o8 = 11;
		}
	}

	//recombine blocks
	y = y ^ o1 << 28;
	y = y ^ o2 << 24;
	y = y ^ o3 << 20;
	y = y ^ o4 << 16;
	y = y ^ o5 << 12;
	y = y ^ o6 << 8;
	y = y ^ o7 << 4;
	y = y ^ o8;

	return y;


}

//perform straight P-Box permutation on 32 bit right half
ull postSPermutation(ull x)
{
	ull y = 0, i = 1;
	x = x << 32;

	if (x & (i << 63)) y |= (i << 55); //Bit 1 -> 9
	if (x & (i << 62)) y |= (i << 47); //Bit 2 -> 17
	if (x & (i << 61)) y |= (i << 41); //Bit 3 -> 23
	if (x & (i << 60)) y |= (i << 33); //Bit 4 -> 31
	if (x & (i << 59)) y |= (i << 51); //Bit 5 -> 13
	if (x & (i << 58)) y |= (i << 36); //Bit 6 -> 28
	if (x & (i << 57)) y |= (i << 62); //Bit 7 -> 2
	if (x & (i << 56)) y |= (i << 46); //Bit 8 -> 18
	if (x & (i << 55)) y |= (i << 40); //Bit 9 -> 24
	if (x & (i << 54)) y |= (i << 48); //Bit 10 -> 16
	if (x & (i << 53)) y |= (i << 34); //Bit 11 -> 30
	if (x & (i << 52)) y |= (i << 58); //Bit 12 -> 6
	if (x & (i << 51)) y |= (i << 38); //Bit 13 -> 26
	if (x & (i << 50)) y |= (i << 44); //Bit 14 -> 20
	if (x & (i << 49)) y |= (i << 54); //Bit 15 -> 10
	if (x & (i << 48)) y |= (i << 63); //Bit 16 -> 1
	if (x & (i << 47)) y |= (i << 56); //Bit 17 -> 8
	if (x & (i << 46)) y |= (i << 50); //Bit 18 -> 14
	if (x & (i << 45)) y |= (i << 39); //Bit 19 -> 25
	if (x & (i << 44)) y |= (i << 61); //Bit 20 -> 3
	if (x & (i << 43)) y |= (i << 60); //Bit 21 -> 4
	if (x & (i << 42)) y |= (i << 35); //Bit 22 -> 29
	if (x & (i << 41)) y |= (i << 53); //Bit 23 -> 11
	if (x & (i << 40)) y |= (i << 45); //Bit 24 -> 19
	if (x & (i << 39)) y |= (i << 32); //Bit 25 -> 32
	if (x & (i << 38)) y |= (i << 52); //Bit 26 -> 12
	if (x & (i << 37)) y |= (i << 42); //Bit 27 -> 22
	if (x & (i << 36)) y |= (i << 57); //Bit 28 -> 7
	if (x & (i << 35)) y |= (i << 59); //Bit 29 -> 5
	if (x & (i << 34)) y |= (i << 37); //Bit 30 -> 27
	if (x & (i << 33)) y |= (i << 49); //Bit 31 -> 15
	if (x & (i << 32)) y |= (i << 43); //Bit 32 -> 21

	y = y >> 32;

	return y;

}

//perform feistal round on block using keys[round]
ull feistelRound(ull block, ull key)
{
	ull r = block, l = block, rtemp = 0;
	l = l >> 32;
	r = r << 32;
	r = r >> 32;
	
	rtemp = r;

	r = expandBlock(r);
	r = r ^ key;
	r = substitutions(r);
	r = postSPermutation(r);

	r = r ^ l;	
	l = rtemp;

	block = l << 32;
	block = block + r;
	
	return block;
}


//returns random char for padding
char getPadding()
{
		int ascii = rand() % 256;
		char thispad = char(ascii);
		return thispad;
}



int main(int argcount, char *argvalues[])
{
	
	FILE * inFilePnt, * outFilePnt;
	long lSize;
	size_t result;
	ull currentBlock, key;
	ull keys[16];

	getKeys(argvalues[2], keys);

	fopen_s(&inFilePnt, argvalues[4], "rb");
	fopen_s(&outFilePnt, argvalues[5], "wb");
	if (inFilePnt == NULL) { fputs("File error", stderr); exit(1); }
	if (outFilePnt == NULL) { fputs("File error", stderr); exit(1); }

	//obtain file size:
	fseek(inFilePnt, 0, SEEK_END);
	lSize = ftell(inFilePnt);
	rewind(inFilePnt);

	int i = 0;
	while (i < lSize)
	{
		int numLeft = lSize - i;
		if (numLeft > 0 && numLeft < 8) 
		{	
			char * buffer = (char*)malloc(8);
			int padNum = 8 - numLeft;
			result = fread(buffer, 1, numLeft, inFilePnt);
			//char * paddedBuffer = new char[8];
			//strcpy_s(paddedBuffer, buffer);

			while (padNum > 0)
			{	
				buffer[8 - padNum] = getPadding();				
				padNum--;
			}
			i += 8;
		

			//call function to add random characters to &currentBlock
		}
		else
		{
			result = fread(&currentBlock, 1, 8, inFilePnt);
			currentBlock = initialPermutation(currentBlock);
			if (argvalues[1][1] == 'E')
			{
				currentBlock = feistelRound(currentBlock, keys[0]);
				currentBlock = feistelRound(currentBlock, keys[1]);
				currentBlock = feistelRound(currentBlock, keys[2]);
				currentBlock = feistelRound(currentBlock, keys[3]);
				currentBlock = feistelRound(currentBlock, keys[4]);
				currentBlock = feistelRound(currentBlock, keys[5]);
				currentBlock = feistelRound(currentBlock, keys[6]);
				currentBlock = feistelRound(currentBlock, keys[7]);
				currentBlock = feistelRound(currentBlock, keys[8]);
				currentBlock = feistelRound(currentBlock, keys[9]);
				currentBlock = feistelRound(currentBlock, keys[10]);
				currentBlock = feistelRound(currentBlock, keys[11]);
				currentBlock = feistelRound(currentBlock, keys[12]);
				currentBlock = feistelRound(currentBlock, keys[13]);
				currentBlock = feistelRound(currentBlock, keys[14]);
				currentBlock = feistelRound(currentBlock, keys[15]);
			}
			if (argvalues[1][1] == 'D')
			{
				currentBlock = feistelRound(currentBlock, keys[15]);
				currentBlock = feistelRound(currentBlock, keys[14]);
				currentBlock = feistelRound(currentBlock, keys[13]);
				currentBlock = feistelRound(currentBlock, keys[12]);
				currentBlock = feistelRound(currentBlock, keys[11]);
				currentBlock = feistelRound(currentBlock, keys[10]);
				currentBlock = feistelRound(currentBlock, keys[9]);
				currentBlock = feistelRound(currentBlock, keys[8]);
				currentBlock = feistelRound(currentBlock, keys[7]);
				currentBlock = feistelRound(currentBlock, keys[6]);
				currentBlock = feistelRound(currentBlock, keys[5]);
				currentBlock = feistelRound(currentBlock, keys[4]);
				currentBlock = feistelRound(currentBlock, keys[3]);
				currentBlock = feistelRound(currentBlock, keys[2]);
				currentBlock = feistelRound(currentBlock, keys[1]);
				currentBlock = feistelRound(currentBlock, keys[0]);
			}
			currentBlock = finalPermutation(currentBlock);
			fwrite(&currentBlock, 1, 8, outFilePnt);
			i += 8;
		}
	}

	fclose(inFilePnt);
	fclose(outFilePnt);


}
